@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Text.RegularExpressions
@namespace BlazorDiffusion.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <base href="~/" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blazor Diffusion</title>
    <link rel="stylesheet" href="css/app.css" />
    <link href="css/typography.css" rel="stylesheet">
    <link href="css/markdown.css" rel="stylesheet">
    <link rel="icon" href="/img/blazor.svg" type="image/svg+xml">
    <!--component type="typeof(Microsoft.AspNetCore.Components.Web.HeadOutlet)"
               render-mode="WebAssemblyPrerendered" /-->
</head>
<body class="bg-white dark:bg-black dark:text-white">
<div id="app">
    <div id="app-loading">
        <div class="min-h-screen">
            <header class="border-b border-gray-200 dark:border-gray-800 pr-3">
                <div class="flex flex-wrap items-center">
                    <div class="flex flex-grow flex-shrink flex-nowrap justify-end items-center">
                        <NavLink href="/" class="flex items-center flex-shrink-0 px-4 text-2xl whitespace-nowrap overflow-x-hidden flex items-center">
                            <img class="h-8 w-8"
                                    src="/img/blazor.svg"
                                    alt="My App">
                            <div class="ml-2 text-black dark:text-white">Diffusion</div>
                        </NavLink>
                        <nav class="relative flex flex-grow" style="min-height:55px">
                        </nav>
                    </div>
                </div>
            </header>

            <div class="flex flex-col flex-1">
                <main class="flex-1">
                    <div class="py-6">
                        <div class="content px-4 sm:px-6 md:px-8">
                            @RenderBody()
                        </div>
                    </div>
                </main>
            </div>
        </div>
        <div class="-mt-8 text-center">
            <a class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100" href="https://servicestack.net/blazor" target="_blank" title="powered by">servicestack.net/blazor</a>
        </div>
    </div>
</div>

<div id="blazor-error-ui" class="hidden fixed bottom-0 w-full z-10">
    <div class="flex rounded-md bg-yellow-50 p-4 m-4">
        <div class="flex-shrink-0">
            <!-- Heroicon name: solid/exclamation -->
            <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
        </div>
        <div class="ml-3">
            <environment include="Staging,Production">
                <h3 class="text-sm font-medium text-yellow-800">An error has occurred. This application may no longer respond until reloaded.</h3>
            </environment>
            <environment include="Development">
                <h3 class="text-sm font-medium text-yellow-800">An unhandled exception has occurred. See browser dev tools for details.</h3>
            </environment>
            <div class="mt-4">
                <div class="-mx-2 -my-1.5 flex">
                    <button type="button" class="reload bg-yellow-50 px-2 py-1.5 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-50 focus:ring-yellow-600">Reload</button>
                </div>
            </div>
        </div>
        <div class="ml-auto pl-3">
            <div class="-mx-1.5 -my-1.5">
                <button type="button" class="dismiss inline-flex bg-yellow-50 rounded-md p-1.5 text-yellow-500 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-50 focus:ring-yellow-600">
                    <span class="sr-only">Dismiss</span>
                    <!-- Heroicon name: solid/x -->
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
const path = location.pathname
let prerenderedHtml = ""
if (!location.search) {
    const pagePath = path.endsWith('/')
        ? path.substring(0, path.length - 2) + '/index.html'
        : path
    fetch(`/prerender${pagePath}`)
        .then(r => r.text())
        .then(html => {
            if (!html || html.indexOf('<!DOCTYPE html>') >= 0) return // ignore CDN 404.html
            const pageBody = document.querySelector('#app-loading .content')
            if (pageBody)
                pageBody.innerHTML = prerenderedHtml = `<i hidden data-prerender="${path}"></i>` + html
        })
        .catch(/* no prerendered content found for this path */)
}
function prerenderedPage() { return prerenderedHtml }
</script>

<script src="_framework/blazor.webassembly.js"></script>
<script type="text/javascript" src="/js/servicestack-blazor.js"></script>
<script>JS.init({ colorScheme: location.search === '?light' ? 'light' : 'dark' })</script>

<script>
    const origScrollTo = window.scrollTo;
    window.scrollTo = (x, y) => {
        const shouldSkip = true; // TODO: Insert your own logic here
        if (x === 0 && y === 0 && shouldSkip)
            return;
        return origScrollTo.apply(this, arguments);
    };
</script>

</body>
</html>
