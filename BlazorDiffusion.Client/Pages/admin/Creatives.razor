@page "/admin/creatives"
@attribute [Authorize(Roles = "Admin")]
@inherits AuthBlazorComponentBase

@inject NavigationManager NavigationManager

<Breadcrumbs class="mb-8" HomeHref="/admin">
    <Breadcrumb>
        Creatives
    </Breadcrumb>
</Breadcrumbs>

<div>
  <div class="sm:hidden">
    <label for="tabs" class="sr-only">Select a tab</label>
    <!-- Use an "onChange" listener to redirect the user to the selected tab URL. -->
    <select id="tabs" name="tabs" @onchange="TabSelection" class="block w-full rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500">
      <option value="All" selected>All</option>

      <option value="MissingPrimaryArtifact">Missing Primary Artifact</option>
    </select>
  </div>
  <div class="hidden sm:block">
    <div class="border-b border-gray-200">
      <nav class="-mb-px flex space-x-8" aria-label="Tabs">
        <!-- Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" -->
        <button @onclick="(e) => ChangeTab(CreativesTab.All)" class="@(tab == CreativesTab.All ? "border-indigo-500 text-indigo-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm">
          <span class="text-lg">All</span>
        </button>

        <button @onclick="(e) => ChangeTab(CreativesTab.MissingPrimaryArtifact)" class="@(tab == CreativesTab.MissingPrimaryArtifact ? "border-indigo-500 text-indigo-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm">

          <span class="text-lg">Missing Primary Artifact</span>
        </button>
      </nav>
    </div>
  </div>
</div>


<AutoQueryGrid Model="Creative" Apis="Apis.AutoQuery<QueryCreatives, UpdateCreative, HardDeleteCreative>()"
               @ref="autoQueryGrid"
               RowSelected="RowSelected"
               
               ConfigureQuery="ConfigureQuery">
    <EditForm>
        @if (reviewItem != null)
        {
            <div class="relative z-10" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
                <div class="">
                    <div class="">
                        <div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10 sm:pl-16">
                            <PrimaryArtifactSelection Creative="reviewItem" OnClose="Close" 
                                OnDelete="Delete" OnSave="Save"
                                EditPanelCss=@editPanelClass></PrimaryArtifactSelection>
                        </div>
                    </div>
                </div>
            </div>
        }

    </EditForm>
    <Columns>
        <Column Title="User" Field="(Creative x) => x.OwnerId"/>
        <Column Title="Id" Field="(Creative x) => x.Id"/>
        <Column Field="(Creative x) => x.Modifiers">
            <Template>
                @if (context.Modifiers?.Count > 0)
                {
                    <TextLink class="flex" href=@($"/admin/modifiers?Ids={string.Join(",", context.Modifiers.Select(x => x.ModifierId))}")>
                        <Icon class="w-6 h-6 mr-1" Image=@typeof(Modifier).GetIcon()/>
                        @TextUtils.Pluralize("Modifier", context.Modifiers)
                    </TextLink>
                }
            </Template>
        </Column>
        <Column Field="(Creative x) => x.Artists">
            <Template>
                @if (context.Artists?.Count > 0)
                {
                    <TextLink class="flex" href=@($"/admin/artists?Ids={string.Join(",", context.Artists.Select(x => x.ArtistId))}")>
                        <Icon class="w-6 h-6 mr-1" Image=@typeof(Artist).GetIcon()/>
                        @TextUtils.Pluralize("Artist", context.Artists)
                    </TextLink>
                }
            </Template>
        </Column>
        <Column Field="(Creative x) => x.Artifacts">
            <Template>
                @if (context.Artifacts?.Count > 0)
                {
                    <TextLink class="flex" href=@($"/admin/artifacts?CreativeId={context.Id}")>
                        <Icon class="w-6 h-6 mr-1" Image=@typeof(Artifact).GetIcon()/>
                        @TextUtils.Pluralize("Artifact", context.Artifacts)
                    </TextLink>
                }
            </Template>
        </Column>
        <Column Field="(Creative x) => x.Key"/>
        <Column Field="(Creative x) => x.CreatedDate" Format="s"/>
        <Column Field="(Creative x) => x.UserPrompt"/>
    </Columns>
</AutoQueryGrid>


@code {

    [Parameter, SupplyParameterFromQuery]
    public string? Edit { get; set; }

    public Creative reviewItem = null;
    AutoQueryGrid<Creative> autoQueryGrid;

    string editPanelClass = "show";
    CreativesTab tab = CreativesTab.All;

    async Task TabSelection(ChangeEventArgs e)
    {
        var tabVal = e.Value?.ConvertTo<CreativesTab>() ?? CreativesTab.All;
        tab = tabVal;
        await autoQueryGrid.RefreshAsync();
    }

    async Task ChangeTab(CreativesTab tabVal)
    {
        tab = tabVal;
        await autoQueryGrid.RefreshAsync();
    }

    void ConfigureQuery(QueryBase query)
    {
        switch(tab)
        {
            case CreativesTab.MissingPrimaryArtifact:
                query.AddQueryParam("PrimaryArtifactId", "");
                break;
            default:
            case CreativesTab.All:
                break;
        }
    }

    async Task RowSelected(Creative item)
    {
        reviewItem = item;
        editPanelClass = "show";
        StateHasChanged();
    }

    async Task Close()
    {
        editPanelClass = "hidden";
        reviewItem = null;
    }

    async Task Save()
    {
        await autoQueryGrid.RefreshAsync();
    }

    async Task Delete()
    {
        await autoQueryGrid.RefreshAsync();
    }

    public enum CreativesTab
    {
        All,
        MissingPrimaryArtifact
    }
}