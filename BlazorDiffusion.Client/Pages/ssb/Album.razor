@page "/ssb/album"
@inherits AppComponentBase

<h1 class="my-4 text-2xl text-center" data-album="@SelectedAlbum?.Id">@SelectedAlbum?.Name</h1>

<StaticGallery Results=@GalleryResults GridColumns="GridColumns"></StaticGallery>

@if (SelectedAlbum != null && Pages > 1)
{
    <nav class="mt-8 flex items-center justify-between border-t border-gray-700 px-4 sm:px-0">
        <div class="-mt-px flex w-0 flex-1">
            @if (UsePage > 1)
            {
                <a href=@Ssg.GetAlbum(SelectedAlbum, UsePage - 1) class="inline-flex items-center border-t-2 border-transparent pt-4 pr-1 text-sm font-medium text-gray-500 hover:border-gray-600 hover:text-gray-200">
                    <!-- Heroicon name: mini/arrow-long-left -->
                    <svg class="mr-3 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M18 10a.75.75 0 01-.75.75H4.66l2.1 1.95a.75.75 0 11-1.02 1.1l-3.5-3.25a.75.75 0 010-1.1l3.5-3.25a.75.75 0 111.02 1.1l-2.1 1.95h12.59A.75.75 0 0118 10z" clip-rule="evenodd" />
                    </svg>
                    Previous
                </a>
            }
        </div>
        <div class="hidden md:-mt-px md:flex">
            @for (var i = 0; i < Pages; i++)
            {
                var pageNo = i + 1;
                if (UsePage == pageNo)
                {
                    <a href=@Ssg.GetAlbum(SelectedAlbum, pageNo) class="inline-flex items-center border-t-2 border-indigo-400 px-4 pt-4 text-sm font-medium text-indigo-300" aria-current="page">@pageNo</a>
                }
                else
                {
                    <a href=@Ssg.GetAlbum(SelectedAlbum, pageNo) class="inline-flex items-center border-t-2 border-transparent px-4 pt-4 text-sm font-medium text-gray-500 hover:border-gray-600 hover:text-gray-200">@pageNo</a>
                }
            }
        </div>
        <div class="-mt-px flex w-0 flex-1 justify-end">
            @if (UsePage < Pages)
            {
                <a href=@Ssg.GetAlbum(SelectedAlbum, UsePage + 1) class="inline-flex items-center border-t-2 border-transparent pt-4 pl-1 text-sm font-medium text-gray-500 hover:border-gray-600 hover:text-gray-200">
                    Next
                    <!-- Heroicon name: mini/arrow-long-right -->
                    <svg class="ml-3 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M2 10a.75.75 0 01.75-.75h12.59l-2.1-1.95a.75.75 0 111.02-1.1l3.5 3.25a.75.75 0 010 1.1l-3.5 3.25a.75.75 0 11-1.02-1.1l2.1-1.95H2.75A.75.75 0 012 10z" clip-rule="evenodd" />
                    </svg>
                </a>
            }
        </div>
    </nav>
}

<h3 class="mt-16 mb-8 text-xl">Other Albums</h3>

<div class="grid grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-7 2xl:grid-cols-8">
@foreach (var album in OtherAlbums)
{
    <div class="text-center">
        <a href=@($"/albums/{album.Slug}.html") class=@ClassNames("text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl",
           album.RefId != SelectedAlbum?.AlbumRef ? "text-gray-500 hover:text-gray-300" : "text-gray-300")>
            @album.Name
        </a>
    </div>
}
</div>

@code {
    public const int GridColumns = 4;

    [Parameter, SupplyParameterFromQuery] public string? RefId { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Page { get; set; }

    SearchArtifacts request = new();
    List<Artifact> results = new();
    HashSet<int> resultIds = new();
    List<AlbumRef> OtherAlbums = new();
    bool hasMore;

    ApiResult<QueryResponse<ArtifactResult>> api = new();
    public AlbumResult? SelectedAlbum;
    GalleryResults GalleryResults = new();
    int Total => api.Response?.Total ?? 0;
    int UsePage => Math.Max(Page ?? 1, 1);
    int Pages => (int)Math.Ceiling(Total / (double)UserState.StaticPagedTake);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (RefId == null) return;
        request.Album = RefId;
        request.Skip = (UsePage - 1) * UserState.StaticPagedTake;
        request.Take = UserState.StaticPagedTake;
        request.Include = "Total";
        api = await ApiAsync(request);
        clearResults();

        if (api.Succeeded)
        {
            if (api.Response?.Results != null)
            {
                addResults(api.Response.Results);
            }
        }

        var apiAlbum = await ApiAsync(new GetAlbumResults { RefIds = new() { RefId } });
        if (apiAlbum.Succeeded)
        {
            SelectedAlbum = apiAlbum.Response?.Results.FirstOrDefault();
            if (SelectedAlbum != null)
            {
                SetTitle(SelectedAlbum.Name);
            }
        }

        var apiAlbums = await ApiAsync(new GetAlbumRefs());
        if (apiAlbums.Succeeded)
        {
            OtherAlbums = apiAlbums.Response!.Results;
        }
    }

    void setResults(IEnumerable<Artifact> results)
    {
        this.results = results.ToList();
        GalleryResults = X.Apply(GalleryResults.Clone(), x => x.Artifacts = this.results.ShuffleGridArtifacts(GridColumns).ToList());
        StateHasChanged();
    }
    
    void clearResults()
    {
        results.Clear();
        resultIds.Clear();
    }

    void addResults(List<ArtifactResult> artifacts, bool reset = false)
    {
        if (reset)
            clearResults();

        hasMore = artifacts.Count >= request.Take;
        foreach (var artifact in artifacts)
        {
            if (resultIds.Contains(artifact.Id))
                continue;

            resultIds.Add(artifact.Id);
            results.Add(artifact);
        }
        setResults(results);
    }
}
