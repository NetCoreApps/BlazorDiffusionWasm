@page "/ssg/albums"
@inherits AppComponentBase

<h1 class="my-4 text-2xl text-center">Albums</h1>

<div class=@ClassNames("grid", AppCss.GetGridClass(GridColumns))>
    @foreach (var album in results)
    {
        var artifact = UserState.GetAlbumCoverArtifact(album);
        @if (artifact != null)
        {
            <div @key=@album.Id>
                <a href=@(AppConfig.Instance.BaseUrl.CombineWith($"/albums/{album.Slug}.html"))
                   class=@ClassNames("overflow-hidden flex justify-center")>
                    <div class="relative sm:p-2 flex flex-col cursor-pointer items-center w-32 h-32 sm:w-64 sm:h-64 xl:w-96 xl:h-96 2xl:w-[512px] 2xl:h-[512px]">
                        <ArtifactImage Artifact="artifact" LazyLoad="false"
                               class=@ClassNames("flex rounded sm:rounded-xl w-full h-full") ImageClass="object-cover" />

                        <div class="absolute top-0 left-0 w-full h-full group select-none overflow-hidden sm:m-1 rounded sm:rounded-xl">
                            <div class="w-full h-full absolute inset-0 z-10 block text-zinc-100 drop-shadow pointer-events-none line-clamp sm:px-2 sm:pb-2 text-sm opacity-0 group-hover:opacity-40 transition duration-300 ease-in-out bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-gray-700 via-gray-900 to-black"></div>
                            <div class="absolute w-full h-full flex z-10 text-zinc-100 justify-between drop-shadow opacity-0 group-hover:opacity-100 transition-opacity sm:mb-1 text-sm">
                            </div>
                            <div class="relative w-full h-full overflow-hidden flex flex-col justify-between overflow-hidden">
                                <div></div>
                                <div>
                                    <div class="hidden sm:flex bg-white/40 bg-black/40 sm:pt-2 sm:pl-4 sm:pb-4 sm:pr-4 w-full">
                                        <div class="w-full">
                                            <h2 class="truncate text-lg font-medium text-gray-900 dark:text-gray-200 text-center">@album.Name</h2>
                                            <div class="mt-1">
                                                <p class="truncate text-sm text-gray-500"></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
        }
    }
</div>

@code {
    public const int GridColumns = 5;
    [Inject] public UserState UserState { get; set; }

    ApiResult<GetAlbumIdsResponse> api = new();
    List<AlbumResult> results = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        api = await ApiAsync(new GetAlbumIds());
        if (api.Succeeded)
        {
            results = await UserState.GetAlbumsByIdsAsync(api.Response!.Results.Take(UserState.StaticTake));
        }
    }

    async Task fetchResults(int count)
    {
        var nextResults = await UserState.GetAlbumsByIdsAsync(api.Response!.Results.Take(count));
        setResults(nextResults);
    }

    void setResults(List<AlbumResult> results)
    {
        this.results = results;
        StateHasChanged();
    }
}
