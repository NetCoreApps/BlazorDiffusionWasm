@page "/create"
@attribute [Authorize]
@inherits AppAuthComponentBase

<Home Page="AppPage.Create">
    <form class="mt-4 mx-auto shadow overflow-hidden sm:rounded-md w-[420px] sm:w-[600px]" @onsubmit="noop" @onsubmit:preventDefault>
    <CascadingValue Value=@api.Error>
        <ErrorSummary Except=@VisibleFields />

        <div class="px-4 space-y-6 p-2 sm:p-6">
            <div class="flex justify-center">
                <div @onclick="_ => selectImageSize(ImageSize.Square)" class=@CssUtils.ClassNames("mr-4 flex flex-col items-center hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer", imageSize == ImageSize.Square ? "text-gray-900 dark:text-gray-100" : "text-gray-400")>
                    <svg class="w-12 h-12" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 48 48"><path fill="currentColor" fill-rule="evenodd" d="M14 14v20h20V14H14Zm-1-2a1 1 0 0 0-1 1v22a1 1 0 0 0 1 1h22a1 1 0 0 0 1-1V13a1 1 0 0 0-1-1H13Z" clip-rule="evenodd" /></svg>
                    <span class="text-sm">square</span>
                </div>
                <div @onclick="_ => selectImageSize(ImageSize.Portrait)" class=@CssUtils.ClassNames("mr-4 flex flex-col items-center hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer", imageSize == ImageSize.Portrait ? "text-gray-900 dark:text-gray-100" : "text-gray-400")>
                    <svg class="w-12 h-12" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 21 21"><g fill="none" fill-rule="evenodd" transform="translate(5 3)"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M2.5.5h6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-10a2 2 0 0 1 2-2z" /><circle cx="5.5" cy="11.5" r="1" fill="currentColor" /></g></svg>
                    <span class="text-sm">portrait</span>
                </div>
                <div @onclick="_ => selectImageSize(ImageSize.Landscape)" class=@CssUtils.ClassNames("flex flex-col items-center hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer", imageSize == ImageSize.Landscape ? "text-gray-900 dark:text-gray-100" : "text-gray-400")>
                    <svg class="w-12 h-12 rotate-90" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 21 21"><g fill="none" fill-rule="evenodd" transform="translate(5 3)"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M2.5.5h6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-10a2 2 0 0 1 2-2z" /><circle cx="5.5" cy="11.5" r="1" fill="currentColor" /></g></svg>
                    <span class="text-sm">landscape</span>
                </div>
            </div>
        </div>

        @if (DataCache != null)
        {
            <div class="mx-auto w-[420px]">
                <Autocomplete Id="ArtistIds" Options="ArtistOptions" Multiple=true @bind-Values="artists" placeholder="Select Artist Style" @onclick="CloseDialogsAsync"
                    Match="(x, value) => X.Map(value.Trim(), v => 
                            x.Name.Contains(v, StringComparison.OrdinalIgnoreCase) ||
                            x.Type?.Contains(v, StringComparison.OrdinalIgnoreCase) == true)">
                    <Item>
                        <div class="flex justify-between">
                            <span class="truncate">@context!.Name</span>
                            <span class="text-gray-400 truncate -mr-6">@context!.Type</span>
                        </div>
                    </Item>
                </Autocomplete>
            </div>

            @if (artists.Count > 0)
            {
                <div class="m-4 flex flex-wrap">
                @foreach (var artist in artists)
                {
                    <div @key=@artist.Id class="pt-2 pr-2">
                        <span class="inline-flex rounded-full items-center py-0.5 pl-2.5 pr-1 text-sm font-medium bg-indigo-100 dark:bg-indigo-800 text-indigo-700 dark:text-indigo-300">
                            @artist.Name
                            <button type="button" @onclick="_ => removeArtist(artist)" class="flex-shrink-0 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-indigo-400 dark:text-indigo-500 hover:bg-indigo-200 dark:hover:bg-indigo-800 hover:text-indigo-500 dark:hover:text-indigo-400 focus:outline-none focus:bg-indigo-500 focus:text-white dark:focus:text-black">
                                <svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8"><path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path></svg>
                            </button>
                        </span>
                    </div>
                }
                </div>
            }

            <div class="mt-8 mx-auto w-[420px]">
                <Autocomplete Id="ModifierIds" Options="ModifierOptions" Multiple=true @bind-Values="modifiers" placeholder="Select Modifiers" @onclick="CloseDialogsAsync"
                    Match="(x, value) => X.Map(value.IndexOf('-') >= 0 ? value.Trim().Replace('-',' ') : value.Trim(), v => 
                                         x.Name.Contains(v, StringComparison.OrdinalIgnoreCase) ||
                                         x.Category.Contains(v, StringComparison.OrdinalIgnoreCase))">
                    <Item>
                        <div class="flex justify-between">
                            <span class="truncate">@context!.Name</span>
                            <span class="text-gray-400 truncate -mr-6">@context!.Category</span>
                        </div>
                    </Item>
                </Autocomplete>
            </div>

            @if (modifiers.Count > 0)
            {
                <div class="m-4 flex flex-wrap">
                @foreach (var modifier in modifiers)
                {
                    <div @key=@modifier.Id class="pt-2 pr-2">
                        <span class="inline-flex rounded-full items-center py-0.5 pl-2.5 pr-1 text-sm font-medium bg-indigo-100 dark:bg-indigo-800 text-indigo-700 dark:text-indigo-300">
                            @modifier.Name
                            <button type="button" @onclick="_ => removeModifier(modifier)" class="flex-shrink-0 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-indigo-400 dark:text-indigo-500 hover:bg-indigo-200 dark:hover:bg-indigo-800 hover:text-indigo-500 dark:hover:text-indigo-400 focus:outline-none focus:bg-indigo-500 focus:text-white dark:focus:text-black">
                                <svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8"><path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path></svg>
                            </button>
                        </span>
                    </div>
                }
                </div>
            }

            <div class="mt-8">
                <div class="sm:hidden">
                    <label for="groups" class="sr-only">Select a tab</label>
                    <select id="groups" name="tabs" class="block w-full dark:bg-black rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
                            @onchange="e => selectGroup(e.Value!.ToString())">
                    @foreach (var group in AppData.CategoryGroups)
                    {
                        <option @key=@group.Name>@group.Name</option>
                    }
                    </select>
                </div>
                <div class="hidden sm:block">
                    <div class="border-b border-gray-200 dark:border-gray-800">
                        <nav class="-mb-px flex" aria-label="Tabs">
                        @foreach (var group in AppData.CategoryGroups)
                        {
                            <button @key=@group.Name @onclick="_ => selectGroup(group.Name)" class=@CssUtils.ClassNames(group.Name == selectedGroup
                                ? "border-indigo-500 dark:border-gray-100 text-indigo-600 dark:text-gray-100" : "border-transparent text-gray-500 hover:text-gray-500 dark:hover:text-gray-400 hover:border-gray-300 dark:hover:border-gray-500",
                                "cursor-pointer w-1/4 py-4 px-1 text-center border-b-2 font-medium text-sm")>@group.Name</button>
                        }
                        </nav>
                    </div>
                </div>
            </div>

            <div class="flex">
                <div class="md:inset-y-0 md:flex md:w-[8.5rem] shrink-0">
                    <div class="flex min-h-0 flex-1 flex-col bg-white dark:bg-gray-800">
                        <div class="flex flex-1 flex-col overflow-y-auto">
                            <nav class="flex-1 space-y-1 px-2 py-4">
                            @foreach (var category in groupCategories)
                            {
                                <button @key=@category @onclick="_ => selectCategory(category)" class=@CssUtils.ClassNames(category == selectedCategory
                                    ? "bg-gray-100 dark:bg-gray-900 text-black dark:text-white"
                                    : "text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-black dark:hover:text-white",
                                    "w-full group flex items-center px-2 py-2 text-sm font-medium rounded-md")>
                                    @category
                                </button>
                            }
                            </nav>
                        </div>
                    </div>
                </div>
                <div class="flex grow p-2">
                    <div>
                        <div class="grid grid-cols-3 gap-2">
                        @foreach (var modifier in categoryModifiers)
                        {
                            <span @key=@modifier.Id @onclick="_ => addModifier(modifier)" class="text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 cursor-pointer">@modifier.Name</span>
                        }
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="mt-4 p-2 flex flex-col gap-y-4">
            <TextInput class="!text-lg" @bind-Value="request.UserPrompt" spellcheck="false" Placeholder="Description of Image" Label="" @onclick="CloseDialogsAsync" />
        </div>

        <div class="mt-4 mx-auto flex justify-center">
            <div class="flex flex-col">

                <PrimaryButton @onclick="submit" Style="ButtonStyle.Sky" class="!rounded-full text-lg font-normal" disabled=@api.IsLoading>
                    Generate
                </PrimaryButton>

                <button class=@ClassNames("mt-2 mb-4", isDirty ? "" : "invisible") @onclick="reset" @onclick:stopPropagation>reset</button>

            </div>
        </div>
    </CascadingValue>
    </form>

    <div class="mt-16 mb-40">
        @if (api.IsLoading)
        {
            <div class="flex justify-center">
                <Loading class="text-gray-300 font-normal" ImageClass="w-7 h-7 mt-1.5" Message="generating images..." />
            </div>
        }
        else if (Creative != null)
        {
            <div class="flex flex-wrap flex justify-evenly">
            @foreach (var artifact in Creative.GetArtifacts())
            {
                var isPrimary = artifact.Id == Creative.PrimaryArtifactId;
                <NavLink href=@($"/create?id={Creative.Id}&view={artifact.Id}") class="overflow-hidden">
                    <div class="relative p-2 flex flex-col cursor-pointer w-40 sm:w-80"
                        @oncontextmenu="e => showArtifactMenu(e, artifact)" @oncontextmenu:preventDefault>
                        <ArtifactImage Artifact="artifact" class=@ClassNames("rounded-xl border-2", 
                            isPrimary ? "border-yellow-500" : artifact.GetBorderColor(View, UserState)) />

                        <div class="absolute top-0 left-0 w-full h-full group select-none overflow-hidden m-1 rounded-xl">
                            <div class="w-full h-full absolute inset-0 z-10 block text-zinc-100 drop-shadow pointer-events-none line-clamp px-2 pb-2 text-sm px-2 opacity-0 group-hover:opacity-40 transition duration-300 ease-in-out bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-gray-700 via-gray-900 to-black"></div>

                            <div class="absolute w-full flex z-10 text-zinc-100 justify-between drop-shadow opacity-0 group-hover:opacity-100 transition-opacity px-2 mb-1 text-sm p-4">
                                @if (isPrimary)
                                {
                                    <svg @onclick="_ => unpinArtifact(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                         class="ml-2 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><title>unpin</title>
                                        <path fill="#ffce31" d="M62 25.2H39.1L32 3l-7.1 22.2H2l18.5 13.7l-7 22.1L32 47.3L50.5 61l-7.1-22.2L62 25.2z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg @onclick="_ => pinArtifact(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                         class="ml-2 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>pin as cover image</title>
                                        <path fill="currentColor" d="M18.27 9.81h-2.82L9.77 4.13l.71-.71l-1.42-1.41l-7.07 7.07l1.42 1.41l.71-.71l5.67 5.68h-.01v2.83l1.42 1.42l3.54-3.55l4.77 4.77l1.41-1.41l-4.77-4.77l3.53-3.53l-1.41-1.41z" />
                                    </svg>
                                }

                                @if (UserState.HasLiked(artifact))
                                {
                                    <svg @onclick="_ => UserState.UnlikeArtifactAsync(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                        class="mr-4 w-6 h-6 text-red-600 hover:text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>undo like</title>
                                        <path fill="currentColor" d="M2 8.4A5.4 5.4 0 0 1 7.5 3A5.991 5.991 0 0 1 12 5a5.991 5.991 0 0 1 4.5-2A5.4 5.4 0 0 1 22 8.4c0 5.356-6.379 9.4-10 12.6C8.387 17.773 2 13.76 2 8.4Z"/>
                                    </svg>
                                }
                                else
                                {
                                    <svg @onclick="_ => UserState.LikeArtifactAsync(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                            class="mr-4 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><title>like</title>
                                        <path fill="currentColor" d="M12 21c-.645-.572-1.374-1.167-2.145-1.8h-.01c-2.715-2.22-5.792-4.732-7.151-7.742c-.446-.958-.683-2-.694-3.058A5.39 5.39 0 0 1 7.5 3a6.158 6.158 0 0 1 3.328.983A5.6 5.6 0 0 1 12 5c.344-.39.738-.732 1.173-1.017A6.152 6.152 0 0 1 16.5 3A5.39 5.39 0 0 1 22 8.4a7.422 7.422 0 0 1-.694 3.063c-1.359 3.01-4.435 5.521-7.15 7.737l-.01.008c-.772.629-1.5 1.224-2.145 1.8L12 21ZM7.5 5a3.535 3.535 0 0 0-2.5.992A3.342 3.342 0 0 0 4 8.4c.011.77.186 1.53.512 2.228A12.316 12.316 0 0 0 7.069 14.1c.991 1 2.131 1.968 3.117 2.782c.273.225.551.452.829.679l.175.143c.267.218.543.444.81.666l.013-.012l.006-.005h.006l.009-.007h.01l.018-.015l.041-.033l.007-.006l.011-.008h.006l.009-.008l.664-.545l.174-.143c.281-.229.559-.456.832-.681c.986-.814 2.127-1.781 3.118-2.786a12.298 12.298 0 0 0 2.557-3.471c.332-.704.51-1.472.52-2.25A3.343 3.343 0 0 0 19 6a3.535 3.535 0 0 0-2.5-1a3.988 3.988 0 0 0-2.99 1.311L12 8.051l-1.51-1.74A3.988 3.988 0 0 0 7.5 5Z"/>
                                    </svg>
                                }
                            </div>

                        </div>

                    </div>
                    <div class="flex justify-between">
                        <span class="m-2 text-sm text-gray-600 dark:text-gray-400">@artifact.Height x @artifact.Width</span>
                        <span class="m-2 text-sm text-gray-600 dark:text-gray-400">@TextUtils.FormatBytes(artifact.ContentLength)</span>
                    </div>
                </NavLink>
            }
            </div>
            
            <div class="flex flex-col justify-center">
                <div class="mt-16 flex flex-col items-center cursor-pointer text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
                     @onclick="softDelete">
                    <svg class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path fill="currentColor" d="M12 12h2v12h-2zm6 0h2v12h-2z"/><path fill="currentColor" d="M4 6v2h2v20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8h2V6zm4 22V8h16v20zm4-26h8v2h-8z"/></svg>
                    <span class="text-sm">discard</span>
                </div>

                @if (IsModerator)
                {
                    <div class="mt-16 text-center">
                        <ConfirmDelete OnDelete="hardDelete" />
                    </div>
                }
            </div>
        }
        else if (api.Error?.ErrorCode == AppErrors.QuotaExceeded)
        {
            var quotaError = QuotaError.FromResponseStatus(api.Error);

            <div class="mx-auto max-w-screen-sm bg-white dark:bg-black shadow dark:border dark:border-red-400 sm:rounded-lg">
              <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-gray-100">@quotaError.Message</h3>
                <div class="mt-2 max-w-xl text-gray-500 dark:text-gray-400">
                  <p class="py-2">The <b>@quotaError.CreditsRequested</b> credits requested exceeds the <b>@Math.Max(quotaError.CreditsRemaining,0)</b> daily quota you have remaining.</p>
                  <p class="py-2">Come back tomorrow in <b>@quotaError.TimeRemaining</b> for another <b>@quotaError.DailyQuota</b> credits!</p>
                  <p class="pt-4 text-center">
                      Request Details:<br> 
                      <div class="block pt-2 dark:text-gray-200">@quotaError.RequestedDetails</div>
                  </p>
                </div>
                @if (!UserState.Signups.Contains(SignupType.Beta))
                {
                <div class="border-t mt-8">
                    <CascadingValue Value=@apiSignup.Error>
                        <ErrorSummary class="pb-2" Except=@SignupVisibleFields />
                        <div class="pt-4 border-gray-700 mt-2 max-w-xl text-gray-500 dark:text-gray-400">
                            <p>You can also request an increased quota by signing up for early Beta access:</p>
                        </div>
                        <div class="mt-5 sm:flex sm:items-end">
                        
                            <div class="w-full sm:max-w-xs mr-2">
                                <TextInput @bind-Value="signup.Email" placeholder="you@example.com" />
                            </div>
                            <div>
                                <PrimaryButton @onclick="signupBeta">Sign up</PrimaryButton>
                            </div>
                        </div>
                    </CascadingValue>
                </div>
                }
              </div>
            </div>
        }
    </div>
</Home>


<div class="z-10 absolute top-16 right-2 -mt-2">
    <div class="flex flex-col">
    @if (CreativeHistory.Count > 0)
    {
        <div class="select-none text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-100">
            <div class="group cursor-pointer" @onclick="_ => UserState.ToggleCreateMenuAsync(CreateMenu.History)">
                <svg class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M19.5 12A7.5 7.5 0 0 0 6.9 6.5h1.35a.75.75 0 0 1 0 1.5h-3a.75.75 0 0 1-.75-.75v-3a.75.75 0 0 1 1.5 0v1.042a9 9 0 1 1-2.895 5.331a.749.749 0 0 1 .752-.623c.46 0 .791.438.724.892A7.5 7.5 0 1 0 19.5 12Zm-7-4.25a.75.75 0 0 0-1.5 0v4.5c0 .414.336.75.75.75h2.5a.75.75 0 0 0 0-1.5H12.5V7.75Z" /></svg>
                <span class="block -mt-0.5 text-xs invisible group-hover:visible">history</span>
            </div>
        </div>
    }
    </div>
</div>

@if (UserState.AppPrefs.CreateMenu == CreateMenu.History && CreativeHistory.Count > 0)
{
    <div class="rounded-md absolute top-24 mt-2 right-2 shadow bg-white dark:bg-black flex flex-col z-10">        
        <nav class="p-2 space-y-1" aria-label="Sidebar">
        @foreach (var item in CreativeHistory)
        {
            <NavLink href=@($"/create?id={item.Id}") class=@ClassNames("flex items-center px-3 py-2 text-sm font-medium", Id == item.Id
                ? "bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100"
                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100")>
                <span class="w-40 truncate" title=@item.UserPrompt>@item.UserPrompt</span>
            </NavLink>
        }
        </nav>
        <NavLink href=@($"/?user={UserState.RefId}") class=@ClassNames("flex items-center px-3 py-2 text-sm", 
            "bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100")>
            <span class="w-40 text-center">view all</span>
        </NavLink>
    </div>
}

@if (View != null && Creative != null)
{
    var artifact = Creative.Artifacts?.FirstOrDefault(x => x.Id == View);
    if (artifact != null)
    {
        <SlideOver @ref="SlideOver" SlideOverClass="relative z-20" Done=@(() => NavigationManager.NavigateTo($"/create?id={Creative.Id}"))
                   ShowTitlebar="false" ShowFooter="false">

            <div class=@CssDefaults.SlideOver.TitlebarClass>
                <div class="flex items-start justify-between space-x-1 sm:space-x-3">
                    <div class="space-y-1">
                        <h2 class="sm:text-lg font-medium text-gray-900 dark:text-gray-200">@Creative.UserPrompt</h2>
                        <div class="mt-1">
                            <p class="text-xs sm:text-sm text-gray-500">
                                @{
                                    var i = 0;
                                }
                                @foreach (var modifier in Creative.ModifierNames)
                                {
                                    @(i++ > 0 ? ", " : "")
                                    <NavLink @key=modifier class="text-gray-400 hover:text-gray-200" href=@($"/?modifier={modifier}")>@modifier</NavLink>
                                }
                                @if (Creative.ArtistNames.Count > 0)
                                {
                                    i = 0;
                                    <span class="px-2 text-gray-300">by</span>
                                    @foreach (var artist in Creative.ArtistNames)
                                    {
                                        @(i++ > 0 ? ", " : "")
                                        <NavLink @key=artist class="text-gray-400 hover:text-gray-200" href=@($"/?artist={artist.Replace(' ',',')}")>@artist</NavLink>
                                    }
                                }
                            </p>
                        </div>
                    </div>
                    <div class="flex h-7 items-center">
                        <button type="button" @onclick="SlideOver!.CloseAsync" class=@CssDefaults.SlideOver.CloseButtonClass.Replace("dark:bg-black", "dark:bg-gray-900")>
                            <span class="sr-only">Close panel</span>
                            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <div class="p-2 mt-4 flex flex-col items-center">

                <div class="relative p-2 flex flex-col cursor-pointer"
                     @oncontextmenu="e => showArtifactMenu(e, artifact)" @oncontextmenu:preventDefault>
                    <ArtifactImage Artifact="artifact" class="rounded-lg" />

                    <div class="absolute top-0 left-0 w-full h-full group select-none overflow-hidden m-1 rounded-xl">
                        <div class="w-full h-full absolute inset-0 z-10 block text-zinc-100 drop-shadow pointer-events-none line-clamp px-2 pb-2 text-sm px-2 opacity-0 group-hover:opacity-40 transition duration-300 ease-in-out bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-gray-700 via-gray-900 to-black"></div>

                        <div class="absolute w-full h-full flex z-10 text-zinc-100 justify-between drop-shadow opacity-0 group-hover:opacity-100 transition-opacity mb-1 text-sm">
                            <div class="relative w-full h-full overflow-hidden flex flex-col justify-between overflow-hidden">

                                <div class="p-4 flex justify-between flex-none">
                                    <div class="cursor-pointer" @onclick:stopPropagation @onclick:preventDefault>
                                    @if (View == Creative.PrimaryArtifactId)
                                    {
                                        <svg @onclick="_ => unpinArtifact(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                                class="ml-2 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
                                            <title>unpin</title>
                                            <path fill="#ffce31" d="M62 25.2H39.1L32 3l-7.1 22.2H2l18.5 13.7l-7 22.1L32 47.3L50.5 61l-7.1-22.2L62 25.2z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg @onclick="_ => pinArtifact(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                                class="ml-2 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                            <title>pin as cover image</title>
                                            <path fill="currentColor" d="M18.27 9.81h-2.82L9.77 4.13l.71-.71l-1.42-1.41l-7.07 7.07l1.42 1.41l.71-.71l5.67 5.68h-.01v2.83l1.42 1.42l3.54-3.55l4.77 4.77l1.41-1.41l-4.77-4.77l3.53-3.53l-1.41-1.41z" />
                                        </svg>
                                    }
                                    </div>

                                    <div class="px-1 cursor-pointer" @onclick="e => showArtifactMenu(e, artifact, 140)" @onclick:stopPropagation @onclick:preventDefault>
                                        <svg class="w-5 h-5 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                                            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"><circle cx="8" cy="2.5" r=".75" /><circle cx="8" cy="8" r=".75" /><circle cx="8" cy="13.5" r=".75" /></g>
                                        </svg>
                                    </div>
                                </div>

                                <div>
                                    <div class="pb-2 px-4">
                                    @if (UserState.HasLiked(artifact))
                                    {
                                        <svg @onclick="_ => UserState.UnlikeArtifactAsync(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                            class="mr-4 w-6 h-6 text-red-600 hover:text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>undo like</title>
                                            <path fill="currentColor" d="M2 8.4A5.4 5.4 0 0 1 7.5 3A5.991 5.991 0 0 1 12 5a5.991 5.991 0 0 1 4.5-2A5.4 5.4 0 0 1 22 8.4c0 5.356-6.379 9.4-10 12.6C8.387 17.773 2 13.76 2 8.4Z"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg @onclick="_ => UserState.LikeArtifactAsync(artifact)" @onclick:stopPropagation @onclick:preventDefault
                                                class="mr-4 w-6 h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><title>like</title>
                                            <path fill="currentColor" d="M12 21c-.645-.572-1.374-1.167-2.145-1.8h-.01c-2.715-2.22-5.792-4.732-7.151-7.742c-.446-.958-.683-2-.694-3.058A5.39 5.39 0 0 1 7.5 3a6.158 6.158 0 0 1 3.328.983A5.6 5.6 0 0 1 12 5c.344-.39.738-.732 1.173-1.017A6.152 6.152 0 0 1 16.5 3A5.39 5.39 0 0 1 22 8.4a7.422 7.422 0 0 1-.694 3.063c-1.359 3.01-4.435 5.521-7.15 7.737l-.01.008c-.772.629-1.5 1.224-2.145 1.8L12 21ZM7.5 5a3.535 3.535 0 0 0-2.5.992A3.342 3.342 0 0 0 4 8.4c.011.77.186 1.53.512 2.228A12.316 12.316 0 0 0 7.069 14.1c.991 1 2.131 1.968 3.117 2.782c.273.225.551.452.829.679l.175.143c.267.218.543.444.81.666l.013-.012l.006-.005h.006l.009-.007h.01l.018-.015l.041-.033l.007-.006l.011-.008h.006l.009-.008l.664-.545l.174-.143c.281-.229.559-.456.832-.681c.986-.814 2.127-1.781 3.118-2.786a12.298 12.298 0 0 0 2.557-3.471c.332-.704.51-1.472.52-2.25A3.343 3.343 0 0 0 19 6a3.535 3.535 0 0 0-2.5-1a3.988 3.988 0 0 0-2.99 1.311L12 8.051l-1.51-1.74A3.988 3.988 0 0 0 7.5 5Z"/>
                                        </svg>
                                    }
                                    </div>
                                    <div class="mt-4"></div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="flex">
                    <span class="my-2 mx-4 text-sm text-gray-600 dark:text-gray-400">@artifact.Height x @artifact.Width</span>
                    <span class="my-2 mx-4 text-sm text-gray-600 dark:text-gray-400">@TextUtils.FormatBytes(artifact.ContentLength)</span>
                </div>
                <div class="flex flex-wrap">
                    <a class="mb-4 flex text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100" href=@artifact.GetDownloadUrl() target="_blank">
                        <svg class="w-5 h-5 mr-0.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 20h12M12 4v12m0 0l3.5-3.5M12 16l-3.5-3.5"/></svg>
                        download
                    </a>
                    <a href=@Ssg.GetArtifact(artifact, Ssg.GetSlug(Creative)) target="_blank"
                        class="ml-8 mb-4 flex text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100">
                        <svg class="w-5 h-5 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M8.586 17H3v-2h18v2h-5.586l3.243 3.243l-1.414 1.414L13 17.414V20h-2v-2.586l-4.243 4.243l-1.414-1.414L8.586 17zM5 3h14a1 1 0 0 1 1 1v10H4V4a1 1 0 0 1 1-1zm1 2v7h12V5H6z" />
                        </svg>
                        art view
                    </a>
                </div>
            </div>
            
            <div class="flex flex-wrap justify-center">
            @foreach (var artifact in Creative.GetArtifacts())
            {
                var isPrimary = artifact.Id == Creative.PrimaryArtifactId;

                <NavLink @key=@artifact.Id href=@($"/create?id={Creative.Id}&view={artifact.Id}") class="relative overflow-hidden">
                    <div class="relative flex justify-center mr-1 mb-1 sm:mr-4 sm:mb-4">
                        <ArtifactImage Artifact="artifact" MinSize="128" 
                            class=@ClassNames("rounded sm:rounded-xl border-2 max-w-[108px] sm:max-w-none object-cover", 
                                isPrimary ? "border-yellow-500" : artifact.GetBorderColor(View, UserState)) />

                        <div class="absolute top-0 left-0 w-full h-full group select-none overflow-hidden rounded sm:rounded-xl">
                            <div class="w-full h-full absolute inset-0 z-10 block text-zinc-100 drop-shadow pointer-events-none line-clamp sm:px-2 sm:pb-2 text-sm opacity-0 group-hover:opacity-40 transition duration-300 ease-in-out bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-gray-700 via-gray-900 to-black"></div>
                        </div>

                    </div>
                </NavLink>
            }
            </div>
        </SlideOver>
    }
}


@if (artifactMenu != null)
{
    <ArtifactMenu Artifact=artifactMenu Position="artifactMenuArgs" OffsetX="artifactOffsetX" Done="hideArtifactMenu" />
}
