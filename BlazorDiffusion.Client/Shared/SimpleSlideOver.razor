@inherits BlazorComponentBase

<div class=@SlideOverClass aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
    <div class="">
        <div class="">
            <div class=@DialogClass>
                <div class=@ClassNames(PanelClass)>

                    <form class=@FormClass @onsubmit="CloseAsync">
                        <!-- Header -->
                        <div class="h-0 flex-1 overflow-y-auto">
                            @if (ShowTitlebar)
                            {
                                <div class=@TitlebarClass>
                                    <div class="flex items-start justify-between space-x-3">
                                        <div class="space-y-1">
                                            <h2 class=@HeadingClass id="slide-over-title">@Title</h2>
                                            @if (SubHeading != null)
                                            {
                                                <div class="mt-1">
                                                    <p class="notes text-sm text-gray-500">@((MarkupString)SubHeading)</p>
                                                </div>
                                            }
                                        </div>
                                        @if (ShowCloseButton)
                                        {
                                            <div class="flex h-7 items-center">
                                                <button type="button" @onclick="CloseAsync" class=@CloseButtonClass>
                                                    <span class="sr-only">Close panel</span>
                                                    <!-- Heroicon name: outline/x-mark -->
                                                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            @ChildContent
                        </div>

                        @if (ShowFooter)
                        {
                            <div class="flex flex-shrink-0 justify-end px-4 py-4">
                                <SecondaryButton @onclick="CloseAsync">
                                    Close
                                </SecondaryButton>
                            </div>
                        }
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string SlideOverClass { get; set; } = CssDefaults.SlideOver.SlideOverClass;
    [Parameter] public string DialogClass { get; set; } = CssDefaults.SlideOver.DialogClass;
    [Parameter] public string PanelClass { get; set; } = CssDefaults.SlideOver.PanelClass;
    [Parameter] public string FormClass { get; set; } = CssDefaults.SlideOver.FormClass;
    [Parameter] public string TitlebarClass { get; set; } = CssDefaults.SlideOver.TitlebarClass;
    [Parameter] public string HeadingClass { get; set; } = CssDefaults.SlideOver.HeadingClass;
    [Parameter] public string CloseButtonClass { get; set; } = CssDefaults.SlideOver.CloseButtonClass;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? SubHeading { get; set; }
    [Parameter] public bool ShowTitlebar { get; set; } = true;
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool ShowFooter { get; set; } = true;

    [Parameter] public EventCallback Done { get; set; }

    public async Task CloseAsync()
    {
        await Done.InvokeAsync();
    }
}
