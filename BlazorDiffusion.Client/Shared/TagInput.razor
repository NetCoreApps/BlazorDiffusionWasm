@inherits UiComponentBase
<TextInput @bind-Value="CurrentTag" Label="Type" placeholder="Type" @onkeyup="KeyUp"></TextInput>
<div>
    <div class="mb-2 flex flex-wrap mt-2">
        @foreach(var tag in Tags)
        {
            
            <div title="Tag" class="flex items-center px-2.5 py-0.5 mr-1 mb-1 rounded-full text-xs font-medium bg-green-100 text-green-800"> 
                <a @onclick="(x) => RemoveTag(tag)" class="mr-1">
                  <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 15 15"><path fill="currentColor" fill-rule="evenodd" d="M.877 7.5a6.623 6.623 0 1 1 13.246 0a6.623 6.623 0 0 1-13.246 0ZM7.5 1.827a5.673 5.673 0 1 0 0 11.346a5.673 5.673 0 0 0 0-11.346Zm2.354 3.32a.5.5 0 0 1 0 .707L8.207 7.5l1.647 1.646a.5.5 0 0 1-.708.708L7.5 8.207L5.854 9.854a.5.5 0 0 1-.708-.708L6.793 7.5L5.146 5.854a.5.5 0 0 1 .708-.708L7.5 6.793l1.646-1.647a.5.5 0 0 1 .708 0Z" clip-rule="evenodd"/></svg>
                </a>
                @tag 
            </div>
        }
    </div>
</div>

@code {
    public string CurrentTag { get; set; }

    [Parameter]
    public EventCallback<List<string>> TagsChanged { get; set; }

    List<string> _tags = new();
    
    [Parameter]
    public List<string> Tags
    {
        get
        {
            return tags;
        }
        set
        {
            tags = value;
            TagsChanged.InvokeAsync(tags).ConfigureAwait(false);
        }
    }

    List<string> tags = new();

    protected override async Task OnParametersSetAsync()
    {
        _tags = Tags;
        await base.OnParametersSetAsync();
    }

    async Task RemoveTag(string tag)
    {
        if (_tags.Contains(tag))
        {
            _tags.Remove(tag);
        }
        Tags = _tags;
    }

    async Task KeyUp(KeyboardEventArgs args)
    {
        if (string.IsNullOrEmpty(CurrentTag))
            return;
        var tag = CurrentTag.EndsWith(",") ? CurrentTag.Substring(0, CurrentTag.Length - 1) : CurrentTag;
        if (string.IsNullOrEmpty(tag))
            return;
        if (args.Key == "," || args.Code == "Enter" || args.Code == "NumpadEnter")
        {
            _tags.Add(tag);
            Tags = _tags;
            CurrentTag = string.Empty;
        }
    }
}