@inherits AuthBlazorComponentBase
@inject NavigationManager NavigationManager

<div class="@CssDefaults.Form.GetPanelClass() @CssDefaults.SlideOver.TransitionClass @EditPanelClass">
    <form class=@CssDefaults.Form.GetFormClass() @onsubmit="Save" @onsubmit:preventDefault>
        <!-- Header -->
        <div class="h-0 flex-1 overflow-y-auto">
            <div class=@CssDefaults.SlideOver.TitlebarClass>
                <div class="flex items-start justify-between space-x-3">
                    <div class="space-y-1">
                        <h2 class=@CssDefaults.SlideOver.HeadingClass id="slide-over-title">@Creative.UserPrompt</h2>
                        <div class="mt-1">
                            <p class="text-sm text-gray-500">@Creative.ModifierNames.Join(", ")&nbsp;</p>
                        </div>
                    </div>
                    <div class="flex h-7 items-center">
                        <button type="button" class=@CssDefaults.SlideOver.CloseButtonClass @onclick="Close">
                            <span class="sr-only">Close panel</span>
                            <!-- Heroicon name: outline/x-mark -->
                            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            <div class="flex flex-1 flex-col justify-between">
                <div class="divide-y divide-gray-200 px-4 sm:px-6">
                    <div class="space-y-6 pt-6 pb-5">
                        <div class="">
                           @if (selectedPrimary != null)
                           {
                               <img src="https://cdn.diffusion.works@(selectedPrimary.FilePath)" @onclick="UnpinArtifact" alt="" 
                                        class="object-cover group-hover:opacity-75 border-yellow-500 rounded-xl border-4">
                           }
                        </div>
                        <ul role="list" class="grid grid-cols-2 gap-x-4 gap-y-8 sm:grid-cols-3 sm:gap-x-6 lg:grid-cols-4 xl:gap-x-8">
                            @foreach (var artifact in Creative.Artifacts.OrEmpty())
                            {
                                <li class="relative" @onclick="(x) => selectPrimaryArtifact(artifact)">
                                    <div class="group aspect-w-10 aspect-h-7 block w-full overflow-hidden rounded-lg bg-gray-100">
                                        <img src="https://cdn.diffusion.works@(artifact.FilePath)" alt="" 
                                        class="object-cover group-hover:opacity-75  @((artifact == selectedPrimary) ? "border-yellow-500 rounded-xl border-4" : "")" style="background-color: @artifact.Background">
                                        <button type="button" class="absolute inset-0 focus:outline-none">
                                            <span class="sr-only">Select as Primary Artifact</span>
                                        </button>
                                    </div>
                                    <p class="pointer-events-none mt-2 block truncate text-sm font-medium text-gray-900">@(artifact.FileName)</p>
                                    <p class="pointer-events-none block text-sm font-medium text-gray-500">@(artifact.ContentLength / 1024) Kb</p>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class=@CssDefaults.Form.ButtonsClass>
            <div>
                <ConfirmDelete OnDelete="DeleteCreative" />
            </div>
            <div class="flex justify-end">
                <SecondaryButton onclick="Close">Cancel</SecondaryButton>
                <PrimaryButton type="submit" class="ml-4 bg-indigo-300">Save</PrimaryButton>
            </div>
        </div>
        <ErrorSummary ExplicitStatus=@(apiResult?.Error) />
    </form>
</div>

@code {
    [Parameter, EditorRequired]
    public Creative Creative { get; set; } = default!;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public string? EditPanelClass { get; set; }

    ApiResult<Creative>? apiResult = null;
    ApiResult<EmptyResponse>? deleteResult = null;
    public Artifact? selectedPrimary = null;

    protected override async Task OnParametersSetAsync()
    {
        if (Creative.PrimaryArtifactId != null)
            selectedPrimary = Creative.Artifacts.SingleOrDefault(x => x.Id == Creative.PrimaryArtifactId);
        else
            selectedPrimary = null;
        await base.OnParametersSetAsync();
    }

    void UnpinArtifact(EventArgs e)
    {
        if(selectedPrimary != null)
        {
            selectedPrimary = null;
        }
    }

    async Task Save()
    {
        var request = new UpdateCreative {
            Id = Creative.Id
        };
        if (selectedPrimary != null)
            request.PrimaryArtifactId = selectedPrimary.Id;
        else
            request.UnpinPrimaryArtifact = true;
        apiResult = await ApiAsync(request);

        if (apiResult.Succeeded)
        {
            await OnSave.InvokeAsync();
            await Close();
        }
    }

    async Task DeleteCreative()
    {
        var request = new HardDeleteCreative {
            Id = Creative.Id
        };

        deleteResult = await ApiAsync(request);

        if (deleteResult.Succeeded)
        {
            await OnDelete.InvokeAsync();
            await Close();
        }
    }

    void selectPrimaryArtifact(Artifact artifact)
    {
        if (artifact == null)
            return;
        selectedPrimary = artifact;
    }

    async Task Close()
    {
        await OnClose.InvokeAsync();
        
        NavigationManager.NavigateTo(NavigationManager.Uri.SetQueryParam("edit", null));
        selectedPrimary = null;
    }
}
